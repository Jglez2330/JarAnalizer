package JarManage;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.jar.Attributes;
import java.util.jar.JarFile;
import java.util.jar.Manifest;

import org.apache.commons.collections4.CollectionUtils;


public class JarExtractPath {
    //Variables

    public static List<String> listC = new ArrayList<>();
    public static List<String> listD = new ArrayList<>();
    public static List<String> listJ = new ArrayList<>();
    public static List<String> listF = new ArrayList<>();
    public static List<String> list = new ArrayList<>();
    public static File jar;
    //Opens the classpath and obtains a list of all jars
    public static void main(String path) throws Exception {
        JarFile jarFile = new JarFile(new File(path)); //This is the "resources" jar
        JarExtractFile.jar = jarFile;
        getDependencies(jarFile);
    }
    public static List<String> getClassPath() throws Exception {
        String s = System.getProperty("java.class.path");
        String[] tokens = s.split(";");
        for(int i = 0; i < tokens.length; i++) {
            listC.add(tokens[i]);
        }
        return listC;
    }
    //Obtains the dependencies from a jar file
    public static List<String> getDependencies (JarFile jar) throws Exception {
        Manifest manifest = jar.getManifest();
        Attributes attrs = manifest.getMainAttributes();
        String s = attrs.getValue("Import-Package");
        String[] tokens = s.split(";");
        for(String t : tokens) {
            listD.add(t);
        }
        return listD;
    }
    //Parses the list generated by the above function to include only jars
    public static List<String> validateJars (List<String> list) {
        for(int i = 0; i < list.size(); i++) {
            if(list.get(i).endsWith(".jar")) {
                listJ.add(list.get(i));
            }
        }
        return listJ;
    }
    public static List<String> compareLists (List<String> list1, List<String> list2){
        listF = (List<String>) CollectionUtils.retainAll(list1, list2);
        if(listF == null) {
            //Descargas de Maven van aquï¿½, mientras tanto
            return null;
        }
        return listF;
    }
    public static List<String> sendToGraph(List<String> list) {
        List<String> listOut = new ArrayList<String>();
        listOut.addAll(list);
        return listOut;
    }
}
